# Movie-Rental-Database
An Oracle PL/SQL database for a video shop to keep track of customers and rentals. 

# video_pkg() specification

create or replace PACKAGE video_pkg AS
    PROCEDURE customer_registration 
    ( 
          p_customer_id NUMBER, 
          p_password VARCHAR2,
          p_name VARCHAR2, 
          p_email_address VARCHAR2,
          p_phone_number VARCHAR2, 
          p_registration_date DATE,
          p_expiration_date DATE
    );
    PROCEDURE update_expiration_date 
    (
          p_customer_id NUMBER, 
          p_new_expiration DATE
    );
    PROCEDURE video_search 
    (
          p_video_name VARCHAR2, 
          p_video_format VARCHAR2 DEFAULT NULL
    );
    PROCEDURE video_checkout 
    (
          p_customer_id NUMBER, 
          p_video_copy_id NUMBER,
          p_video_checkout_date DATE
    );
    PROCEDURE video_return
    (
          p_video_copy_id NUMBER, 
          p_video_return_date DATE
    );
    PROCEDURE print_unreturned_video
    (
          p_customer_id NUMBER
    );

END video_pkg;

----------------------------------------------------------------------------------------------------------------------

# video_pkg() body

create or replace PACKAGE BODY video_pkg IS
    PROCEDURE customer_registration 
    ( 
          p_customer_id NUMBER, 
          p_password VARCHAR2,
          p_name VARCHAR2, 
          p_email_address VARCHAR2,
          p_phone_number VARCHAR2, 
          p_registration_date DATE, 
          p_expiration_date DATE
    ) 
    IS

    v_count	              NUMBER;
    v_status              CHAR;

BEGIN

    IF p_customer_id <= 0 THEN
        DBMS_OUTPUT.PUT_LINE('Invalid ID!');
        RETURN;

    END IF;

    SELECT COUNT(*)
    INTO	v_count
    FROM	customer
    WHERE	customer_id = p_customer_id;

    IF v_count != 0 THEN
        DBMS_OUTPUT.PUT_LINE('Invalid ID!');
        RETURN;

    END IF;

    IF LENGTH(p_password) < 8 OR LENGTH(p_password) > 30 THEN
        DBMS_OUTPUT.PUT_LINE('Invalid passsword!');
        RETURN;
    
    END IF;

    IF p_name is NULL THEN
        DBMS_OUTPUT.PUT_LINE('Invalid name!');
        RETURN;

    END IF;

    IF p_email_address is NULL THEN
        DBMS_OUTPUT.PUT_LINE('Invalid email address!');
        RETURN;

    END IF;

    IF p_registration_date IS NULL OR
        TO_CHAR(p_registration_date, 'yyyymmdd') >
        TO_CHAR(sysdate, 'yyyymmdd') THEN
        
        DBMS_OUTPUT.PUT_LINE('Invalid registration date!');
        RETURN;

    END IF;

    IF p_expiration_date IS NULL OR
      TO_CHAR(p_expiration_date, 'yyyymmdd') <
      TO_CHAR(p_registration_date, 'yyyymmdd') THEN

      DBMS_OUTPUT.PUT_LINE('Invalid expiration date!');
      RETURN;

    END IF;


    INSERT INTO customer
    VALUES(p_customer_id, p_password, UPPER(p_name),
          p_email_address, p_phone_number, p_registration_date,
          p_expiration_date, sysdate);

COMMIT;


DBMS_OUTPUT.PUT_LINE

(INITCAP(p_name) || ' has been added into the customer table.');


EXCEPTION

WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('My exception: ' ||
  TO_CHAR(SQLCODE) || ' ' || SQLERRM);

END customer_registration;
 
    
    PROCEDURE update_expiration_date 
    (
          p_customer_id NUMBER, 
          p_new_expiration DATE
    ) 
    IS
  v_count                     NUMBER;
  v_date                      DATE;

BEGIN
  
  SELECT COUNT(*)
  INTO v_count
  FROM customer
  WHERE customer_id = p_customer_id;
  
  IF v_count <= 0 THEN
  
    DBMS_OUTPUT.PUT_LINE('Invalid ID');
    RETURN;
    
  ELSE
    
    SELECT registration_date
    INTO  v_date
    FROM customer
    WHERE customer_id = p_customer_id;
    
    IF p_new_expiration IS NULL OR
      TO_CHAR(p_new_expiration, 'yyyymmdd') <
      TO_CHAR(v_date, 'yyyymmdd') THEN

        DBMS_OUTPUT.PUT_LINE('Invalid expiration date!');
        RETURN;

    END IF;

    UPDATE customer
    SET expiration_date = p_new_expiration,
        last_update_date = SYSDATE
    WHERE customer_id = p_customer_id;
    DBMS_OUTPUT.PUT_LINE('The expiration date has been updated');
    
    DBMS_OUTPUT.PUT_LINE(p_new_expiration);
    
  END IF;

  EXCEPTION

    WHEN OTHERS THEN

    DBMS_OUTPUT.PUT_LINE('My exception: ' ||

    TO_CHAR(SQLCODE) || ' ' || SQLERRM);
    
END update_expiration_date;
    
    PROCEDURE video_search 
    (
          p_video_name VARCHAR2, 
          p_video_format VARCHAR2 DEFAULT NULL
    )
   IS
  v_name                video.video_name%TYPE;
  v_id                  video.video_id%TYPE;
  v_format              video.format%TYPE;
  v_copy_id             video_copy.video_copy_id%TYPE;
  v_copy_status         VARCHAR2(80);
  v_checkout_date       video_rental_record.checkout_date%TYPE;
  v_due_date            video_rental_record.due_date%TYPE;
  v_count               NUMBER;
  v_available           NUMBER:=0;
  v_results             NUMBER:=0;
  CURSOR c_video IS
    SELECT video_id
    FROM video
    WHERE UPPER(video_name) like '%' || UPPER(p_video_name) || '%'
    AND UPPER(format) like '%' || UPPER(p_video_format) || '%'
    ORDER BY video_name, video_id;
    
  CURSOR c_video_copy IS
    SELECT video_copy_id
    FROM video_copy
    WHERE video_id = v_id 
    AND (copy_status = 'A' or copy_status = 'R')
    ORDER BY video_copy_id;

BEGIN

  SELECT COUNT(*)
  INTO v_count
  FROM video
  WHERE UPPER(video_name) like '%' || UPPER(p_video_name) || '%';
  DBMS_OUTPUT.PUT_LINE(p_video_format);
  
  
  IF v_count <= 0 THEN
      IF p_video_format is NULL THEN
      DBMS_OUTPUT.PUT_LINE('***** 0 results found for ' || p_video_name || '. *****');
      RETURN;
      END IF;
      IF p_video_format is not NULL THEN
      DBMS_OUTPUT.PUT_LINE('***** 0 results found for ' || p_video_name || '(' 
      || p_video_format || '). *****');
      RETURN; 
      END IF;
      
     
  END IF;
  
  IF v_count > 0 THEN
  
  OPEN c_video;
  LOOP
    FETCH c_video INTO v_id;
    EXIT WHEN c_video %NOTFOUND;
      SELECT MIN(video_copy_id)
      INTO v_copy_id
      FROM video_copy
      WHERE video_id = v_id;
      
      OPEN c_video_copy; 
      LOOP
        FETCH c_video_copy INTO v_copy_id;
        EXIT WHEN c_video_copy %NOTFOUND;
        SELECT copy_status
        INTO v_copy_status
        FROM video_copy
        WHERE video_copy_id = v_copy_id;
      
        IF v_copy_status = 'A' THEN
        v_available := v_available + 1;
        END IF;
          v_results := v_results +1;
      END LOOP;
      CLOSE c_video_copy;
  END LOOP;
  CLOSE c_video;
  IF p_video_format is NULL THEN
    DBMS_OUTPUT.PUT_LINE('***** ' || v_results || ' results found for ' || p_video_name
    || '. (Available copies: ' || v_available || ') *****');
  END IF;
  IF p_video_format is not NULL THEN
    IF v_results > 0 THEN
      DBMS_OUTPUT.PUT_LINE('***** ' || v_results || ' results found for ' || p_video_name
      || ' (' || p_video_format || '). (Available copies: ' || v_available || ') *****');
    ELSE
      DBMS_OUTPUT.PUT_LINE('***** ' || v_results || ' results found for ' || p_video_name
      || ' (' || p_video_format ||  '). *****');
    END IF;
  END IF;
  DBMS_OUTPUT.PUT_LINE(RPAD('VIDEO_NAME', 15) || RPAD('VIDEO_COPY_ID', 15) 
      || RPAD('FORMAT', 10) || RPAD('COPY STATUS', 15) || RPAD('CHECKOUT_DATE', 15)
      || RPAD('DUE_DATE', 20));
  DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------');
  OPEN c_video;
  LOOP
    FETCH c_video INTO v_id;
    EXIT WHEN c_video %NOTFOUND;
    
    IF p_video_format is NULL THEN
    
    SELECT format, video_name
    INTO v_format, v_name
    FROM video
    WHERE video_id = v_id;
    
    OPEN c_video_copy;
    LOOP
      FETCH c_video_copy INTO v_copy_id;
      EXIT when c_video_copy %NOTFOUND;
      
      
      SELECT copy_status
      INTO v_copy_status
      FROM video_copy
      WHERE video_copy_id = v_copy_id;
      
      IF v_copy_status = 'A' THEN
        DBMS_OUTPUT.PUT_LINE(RPAD(UPPER(v_name), 15) || LPAD(TO_CHAR(v_copy_id), 13) 
      || '  ' || RPAD(v_format, 12) || RPAD('Available', 15));
      END IF;
      
      IF v_copy_status = 'R' THEN
        SELECT checkout_date, due_date
        INTO v_checkout_date, v_due_date
        FROM video_rental_record
        WHERE video_copy_id = v_copy_id 
        AND return_date is NULL;
        
        DBMS_OUTPUT.PUT_LINE(RPAD(UPPER(v_name), 15) || LPAD(TO_CHAR(v_copy_id), 13) 
      || '  ' || RPAD(v_format, 12) || RPAD('Rented', 15) || LPAD(TO_CHAR(v_checkout_date,'DD-MON-YYYY'), 11)
      || LPAD(TO_CHAR(v_due_date, 'DD-MON-YYYY'), 15));
      END IF;
      
      IF v_copy_status = 'D' THEN
        v_copy_status := 'Damaged';
      END IF;
      
    END LOOP;
    CLOSE c_video_copy;
   
    ELSE
      SELECT  video_name, format
      INTO  v_name, v_format
      FROM video
      WHERE video_id = v_id;
      
      OPEN c_video_copy;
    LOOP
      FETCH c_video_copy INTO v_copy_id;
      EXIT when c_video_copy %NOTFOUND;
      
      SELECT copy_status
      INTO v_copy_status
      FROM video_copy
      WHERE video_copy_id = v_copy_id;
      
      IF v_copy_status = 'A' THEN
        DBMS_OUTPUT.PUT_LINE(RPAD(UPPER(v_name), 15) || LPAD(TO_CHAR(v_copy_id), 13) 
      || '  ' || RPAD(UPPER(v_format), 12) || RPAD('Available', 15));
      END IF;
      
      IF v_copy_status = 'R' THEN
        SELECT checkout_date, due_date
        INTO v_checkout_date, v_due_date
        FROM video_rental_record
        WHERE video_copy_id = v_copy_id 
        AND return_date is NULL;
        
        DBMS_OUTPUT.PUT_LINE(RPAD(UPPER(v_name), 15) || LPAD(TO_CHAR(v_copy_id), 13) 
      || '  ' || RPAD(UPPER(v_format), 12) || RPAD('Rented', 15) || LPAD(TO_CHAR(v_checkout_date,'DD-MON-YYYY'), 11)
      || LPAD(TO_CHAR(v_due_date,'DD-MON-YYYY'), 15));
      END IF;
      
      IF v_copy_status = 'D' THEN
        v_copy_status := 'Damaged';
      END IF;
      
    END LOOP;
    CLOSE c_video_copy;
    END IF;
  END LOOP;
  CLOSE c_video;
  END IF;
  

END;
    
    PROCEDURE video_checkout 
    (
          p_customer_id NUMBER, 
          p_video_copy_id NUMBER,
          p_video_checkout_date DATE
    )
    AS
      v_count                 NUMBER;
      v_id                    video.video_id%TYPE;
      v_exp_date              customer.expiration_date%TYPE; 
      v_copy_status           video_copy.copy_status%TYPE;
      v_more_than_6           NUMBER;
      v_max_checkout_days     video.maximum_checkout_days%TYPE;

BEGIN
  
    SELECT COUNT(*)
    INTO v_count
    FROM customer
    WHERE customer_id = p_customer_id;
    
    
    IF v_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: INVALID CUSTOMER');
        RETURN;
        
    ELSE
        SELECT expiration_date 
        INTO v_exp_date
        FROM customer
        WHERE customer_id = p_customer_id;
        
        IF v_exp_date < sysdate THEN
          DBMS_OUTPUT.PUT_LINE('ERROR: INVALID EXPIRATION DATE');
          RETURN; 
          
        END IF;

        
        SELECT copy_status
        INTO v_copy_status
        FROM video_copy
        WHERE video_copy_id = p_video_copy_id;
        
        IF v_copy_status = 'R' OR v_copy_status = 'D' THEN
          DBMS_OUTPUT.PUT_LINE('ERROR: Copy not avaliable for rent');
          RETURN;
          
        END IF;
        
        IF p_video_checkout_date  > sysdate THEN
          DBMS_OUTPUT.PUT_LINE('ERROR: Checkout date is greater than the current date');
          RETURN;
          
        END IF;
        
        SELECT COUNT(*)
        INTO v_more_than_6
        FROM video_rental_record
        WHERE customer_id = p_customer_id AND return_date is NULL;
        
        IF v_more_than_6 > 6 THEN
          DBMS_OUTPUT.PUT_LINE('ERROR: This customer already has 6 copies checked out');
          RETURN;
          
        END IF;
        
        SELECT video_id
        INTO v_id
        FROM video_copy
        WHERE video_copy_id = p_video_copy_id;
        
        SELECT maximum_checkout_days
        INTO v_max_checkout_days
        FROM video
        WHERE video_id = v_id;
        
        INSERT INTO video_rental_record
        VALUES(p_customer_id, p_video_copy_id, p_video_checkout_date, p_video_checkout_date + v_max_checkout_days, NULL);
        
        UPDATE video_copy
        SET copy_status = 'R'
        WHERE video_copy_id = p_video_copy_id;
        
        DBMS_OUTPUT.PUT_LINE('Video has been checked out');
    
  END IF;
END video_checkout;
    
    PROCEDURE video_return
    (
          p_video_copy_id NUMBER, 
          p_video_return_date DATE
    )
    AS
    v_count               NUMBER;
    v_copy_status         video_copy.copy_status%TYPE;

BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM video_copy
    WHERE video_copy_id = p_video_copy_id;
    
    IF v_count = 0 THEN
      DBMS_OUTPUT.PUT_LINE('Error: Video copy does not exist');
      RETURN;
      
    ELSE
        SELECT copy_status
        INTO v_copy_status
        FROM video_copy
        WHERE video_copy_id = p_video_copy_id;
        
        IF v_copy_status = 'A' OR v_copy_status = 'D' THEN
          DBMS_OUTPUT.PUT_LINE('Error: This copy has not been rented');
          RETURN;
          
        END IF;
        
        IF p_video_return_date > sysdate THEN
          DBMS_OUTPUT.PUT_LINE('Error: Return date if greater than current date');
          
        END IF;
          
        UPDATE video_rental_record
        SET return_date = p_video_return_date
        WHERE video_copy_id = p_video_copy_id;

        UPDATE video_copy
        SET copy_status = 'A'
        WHERE video_copy_id = p_video_copy_id;
        
        DBMS_OUTPUT.PUT_LINE('Video has been returned');
    
    END IF;

END video_return;
    
    PROCEDURE print_unreturned_video
    (
          p_customer_id NUMBER
    )
    AS
  v_name              customer.name%TYPE;
  v_expiration_date   customer.expiration_date%TYPE;
  v_first_checkout    video_rental_record.checkout_date%TYPE;
  v_last_checkout     video_rental_record.checkout_date%TYPE;
  v_copy_id           video_copy.video_copy_id%TYPE;
  v_video_name        video.video_name%TYPE;
  v_checkout          video_rental_record.checkout_date%TYPE;
  v_due_date          video_rental_record.due_date%TYPE;
  v_format            video.format%TYPE;
  v_count             NUMBER;
  v_id                video_copy.video_id%TYPE;
  
  CURSOR c_unreturned IS
    SELECT video_copy_id, checkout_date, due_date
    FROM video_rental_record
    WHERE customer_id = p_customer_id
    AND return_date is NULL
    ORDER by due_date;
    
BEGIN

  SELECT COUNT(*)
  INTO v_count
  FROM customer
  WHERE customer_id = p_customer_id;
  
  IF v_count <= 0 THEN
    DBMS_OUTPUT.PUT_LINE('The customer (id = ' || p_customer_id || ') is not in the customer table.');
    RETURN;
  END IF;
  
  IF v_count > 0 THEN
    SELECT name, expiration_date
    INTO v_name, v_expiration_date
    FROM customer
    WHERE customer_id = p_customer_id;
    
    SELECT COUNT(*)
    INTO v_count
    FROM video_rental_record
    WHERE customer_id = p_customer_id AND return_date is NULL;
    
    SELECT MIN(checkout_date), MAX(checkout_date)
    INTO v_first_checkout, v_last_checkout
    FROM video_rental_record
    WHERE customer_id = p_customer_id;
    
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
    DBMS_OUTPUT.PUT_LINE(RPAD('Customer ID:', 25) || RPAD(p_customer_id,15));
    DBMS_OUTPUT.PUT_LINE(RPAD('Customer Name:',25) || RPAD(v_name,15));
    DBMS_OUTPUT.PUT_LINE(RPAD('Expiration Date:',25) || RPAD(TO_CHAR(v_expiration_date,'DD-MON-YYYY'),15));
    DBMS_OUTPUT.PUT_LINE(RPAD('First Checkout Date:',25) || RPAD(NVL(TO_CHAR(v_first_checkout,'DD-MON-YYYY'),'N/A'),15));
    DBMS_OUTPUT.PUT_LINE(RPAD('Last Checkout Date:',25) || RPAD(NVL(TO_CHAR(v_last_checkout,'DD-MON-YYYY'),'N/A'),15));
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
    DBMS_OUTPUT.PUT_LINE('Number of Unreturned Videos:  ' || v_count);
    
    OPEN c_unreturned;
    LOOP
      FETCH c_unreturned INTO v_copy_id, v_checkout, v_due_date; 
      EXIT WHEN c_unreturned %NOTFOUND;
      
      SELECT video_id
      INTO v_id
      FROM video_copy
      WHERE video_copy_id = v_copy_id;
      
      SELECT video_name, format
      INTO v_name, v_format
      FROM video
      WHERE video_id = v_id;
      DBMS_OUTPUT.PUT_LINE('-------------------------------------------------');
      DBMS_OUTPUT.PUT_LINE(RPAD('Video Copy ID:',25) || RPAD(v_copy_id,15));
      DBMS_OUTPUT.PUT_LINE(RPAD('Video Name:',25) || RPAD(v_name,15));
      DBMS_OUTPUT.PUT_LINE(RPAD('Format:',25) || RPAD(v_format,15));
      DBMS_OUTPUT.PUT_LINE(RPAD('Checkout Date:',25) ||RPAD(TO_CHAR(v_checkout,'DD-MON-YYYY'),15));
      DBMS_OUTPUT.PUT_LINE(RPAD('Due Date:',25) || RPAD(TO_CHAR(v_due_date,'DD-MON-YYYY'),15));
      
    END LOOP;
    CLOSE c_unreturned;
  END IF;
END print_unreturned_video;

END;
